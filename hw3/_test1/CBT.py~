import sys
import numpy as np

def readMatrix(fname, n, m):
   R = np.zeros((n, m))
   W = np.zeros((n, m))
   with open(fname) as f:
      for line in f:
         [a, b, c] = line.strip().split()
         a = int(a) 
         b = int(b)
         R[a][b] = float(c)
         W[a][b] = 1
   return R, W


N = 50000
M = 5000
K = 8 

model_name = sys.argv[1]

with open(model_name) as f:
   P = []
   Q = []
   for (i, line) in enumerate(f):
      if i >= N + 5:
        data = line.strip().split()
        #if data[1] == 'T':
        Q.append(list(map(float, data[2:])))
        #else:
        #   Q.append([ np.nan ] * 8)
      elif i >= 5:
         data = line.strip().split()
         #if data[1] == 'T':
         P.append(list(map(float, data[2:])))
         #else:
         #   P.append([ np.nan ] * 8)

P = np.array(P)
Q = np.array(Q)

srcR, _ = readMatrix(sys.argv[2], N, M)
tgtR, W = readMatrix(sys.argv[3], N, M)

print("read end")

B = np.dot(np.dot(P.T, srcR), Q) / np.dot(np.dot(P.T, np.ones((N, M))), Q)

U = np.zeros((N, K))
V = np.zeros((M, K))

for i in range(M):
   j = np.random.choice(range(K))
   V[i][j] = 1

for t in range(100):
   print("iter = %d" % t)
   tmp = np.dot(B, V.T)
   for i in range(N):
      j = np.argmin(np.sum(W[i] * ((tgtR[i] - tmp)**2), axis=1))
      U[i] = np.zeros(K)
      U[i][j] = 1
   tmp = np.dot(U, B)
   for i in range(M):
      j = np.argmin(np.sum(W.T[i] * ((tgtR.T[i] - tmp.T)**2), axis=1))
      V[i] = np.zeros(K)
      V[i][j] = 1

   #if t % 10 == 0:
   #   ans = np.dot(np.dot(U, B), V.T)
   #   np.save("ans.%d" % t, ans)

ans = np.dot(np.dot(U, B), V.T)
np.save("ans", ans)

